name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Variable pour déterminer le mode de déploiement (local ou ssh)
  # Valeurs possibles: "local" ou "ssh"
  DEPLOY_MODE: ${{ vars.DEPLOY_MODE || 'local' }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Run tests
      run: mvn test
      
    - name: Upload build artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
        retention-days: 1

  docker-build:
    name: Build and Verify Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
      
    - name: Build Docker image
      run: |
        docker build -t stock-management-api:${{ github.sha }} .
        docker tag stock-management-api:${{ github.sha }} stock-management-api:latest
      
    - name: Test Docker image
      run: |
        # Démarrer le conteneur avec des variables d'environnement de test
        docker run -d --name stock-api-test -p 8080:8080 \
          -e "SPRING_PROFILES_ACTIVE=dev" \
          stock-management-api:latest
        
        # Vérification de la santé du conteneur
        echo "Attente du démarrage de l'application..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/api/categories > /dev/null; then
            echo "L'application a démarré avec succès après $i secondes"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "L'application n'a pas démarré dans le délai imparti"
            docker logs stock-api-test
            docker stop stock-api-test
            docker rm stock-api-test
            exit 1
          fi
          
          sleep 1
        done
        
        # Test fonctionnel simple
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/categories)
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "Test de l'API réussi: Statut HTTP $HTTP_STATUS"
        else
          echo "Test de l'API échoué: Statut HTTP $HTTP_STATUS"
          docker logs stock-api-test
          docker stop stock-api-test
          docker rm stock-api-test
          exit 1
        fi
        
        # Arrêter le conteneur
        docker stop stock-api-test
        docker rm stock-api-test
        
    - name: Save Docker image
      if: success()
      run: |
        docker save stock-management-api:latest > stock-api-image.tar
        
    - name: Upload Docker image
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: stock-api-image.tar
        retention-days: 1

  deploy:
    name: Deploy Application
    needs: docker-build
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: ./
        
    - name: Load Docker image
      run: |
        docker load < stock-api-image.tar
    
    # Étape conditionnelle pour déploiement local
    - name: Deploy locally
      if: env.DEPLOY_MODE == 'local'
      run: |
        echo "Mode de déploiement: LOCAL"
        
        # Arrêter les conteneurs existants s'ils existent
        docker-compose down || true
        
        # Variables d'environnement pour le déploiement
        ENV_PROFILE="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        echo "Profil Spring utilisé: $ENV_PROFILE"
        
        # Lancer avec le profil approprié
        SPRING_PROFILES_ACTIVE=$ENV_PROFILE docker-compose up -d
        
        # Vérifier le déploiement
        echo "Attente du démarrage de l'application..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/api/categories > /dev/null; then
            echo "L'application a démarré avec succès après $i secondes"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "L'application n'a pas démarré dans le délai imparti"
            docker-compose logs
            exit 1
          fi
          
          sleep 1
        done
        
        echo "Déploiement local terminé avec succès à $(date)"
        echo "Application accessible à http://localhost:8080"
    
    # Étape conditionnelle pour déploiement SSH
    - name: Deploy via SSH
      if: env.DEPLOY_MODE == 'ssh'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          echo "Mode de déploiement: SSH REMOTE"
          cd /opt/stock-management-api
          
          # Récupérer les dernières modifications
          git pull origin main
          
          # Variables d'environnement pour le déploiement
          ENV_PROFILE="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
          echo "Profil Spring utilisé: $ENV_PROFILE"
          
          # Mettre à jour et redémarrer les conteneurs
          docker-compose down
          docker-compose build --pull
          SPRING_PROFILES_ACTIVE=$ENV_PROFILE docker-compose up -d
          
          # Vérifier le déploiement
          sleep 15
          
          # Vérifier si le conteneur est en cours d'exécution
          if ! docker ps | grep stock-api > /dev/null; then
            echo "ERREUR: Le conteneur n'est pas en cours d'exécution!"
            docker-compose logs
            exit 1
          fi
          
          # Vérifier si l'API répond correctement
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/categories)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "ERREUR: L'API n'est pas accessible (code HTTP: $HTTP_STATUS)!"
            docker-compose logs
            exit 1
          fi
          
          echo "Déploiement terminé avec succès à $(date)"